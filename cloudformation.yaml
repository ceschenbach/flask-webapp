AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This stack deploys the core network infrastructure and IAM resources to be
  used for a service hosted in Amazon ECS using AWS Fargate.
Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    PublicOne:
      CIDR: 10.0.0.0/24
    PublicTwo:
      CIDR: 10.0.1.0/24
    PrivateOne:
      CIDR: 10.0.2.0/24
    PrivateTwo:
      CIDR: 10.0.3.0/24
Resources:
  AppRunnerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2021-10-14
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apprunner.amazonaws.com
            Action:
              - '*'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2021-10-14
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5adee7a3-cdfe-407d-9843-a69afa3e4b27
  EcsServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AttachNetworkInterface'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:CreateNetworkInterfacePermission'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DeleteNetworkInterfacePermission'
                  - 'ec2:Describe*'
                  - 'ec2:DetachNetworkInterface'
                  - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:Describe*'
                  - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'iam:PassRole'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:DescribeLogStreams'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5cc8670d-9775-4445-9209-69d94cacf39f
  ECSTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                Resource: 'arn:aws:dynamodb:*:*:table/MysfitsTable*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 0d6bc7d9-f5d6-407b-ae77-78b2da7a86d2
  MythicalMysfitsServiceCodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: MythicalMysfitsServiceCodePipelineServiceRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: MythicalMysfitsService-codepipeline-service-policy
          PolicyDocument:
            Statement:
              - Action:
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:UploadArchive'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:CancelUploadArchive'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Resource: '*'
                Effect: Allow
              - Action:
                  - 's3:PutObject'
                Resource:
                  - 'arn:aws:s3:::*'
                Effect: Allow
              - Action:
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 'ecs:*'
                  - 'codebuild:*'
                  - 'iam:PassRole'
                Resource: '*'
                Effect: Allow
            Version: 2012-10-17
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a75a5989-c633-4456-80b2-41556ed8e098
  MythicalMysfitsServiceCodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: MythicalMysfitsServiceCodeBuildServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: MythicalMysfitsService-CodeBuildServicePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:ListBranches'
                  - 'codecommit:ListRepositories'
                  - 'codecommit:BatchGetRepositories'
                  - 'codecommit:Get*'
                  - 'codecommit:GitPull'
                Resource:
                  - !Sub >-
                    arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:MythicalMysfitsServiceRepository
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:ListBucket'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 193ad6e3-4fca-4809-b92a-199516badc5a
  AppRunnerMisfits:
    Type: 'AWS::AppRunner::Service'
    Properties:
      ServiceName: mysfitsapp
      SourceConfiguration:
        AuthenticationConfiguration:
          AccessRoleArn: 'arn:aws:iam::123456789012:role/my-ecr-role'
        AutoDeploymentsEnabled: false
        ImageRepository:
          ImageIdentifier: >-
            449561093302.dkr.ecr.us-east-1.amazonaws.com/mythicalmysfits/service:latest
          ImageRepositoryType: ECR
          ImageConfiguration:
            Port: 8080
      InstanceConfiguration:
        Cpu: 1 vCPU
        Memory: 3 GB
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 185956e0-3ca5-4bbb-b825-d8e9d30e6cee
Outputs:
  CurrentRegion:
    Description: REPLACE_ME_REGION
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - CurrentRegion
  CurrentAccount:
    Description: REPLACE_ME_ACCOUNT_ID
    Value: !Ref 'AWS::AccountId'
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - CurrentAccount
  EcsServiceRole:
    Description: REPLACE_ME_ECS_SERVICE_ROLE_ARN
    Value: !GetAtt
      - EcsServiceRole
      - Arn
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - EcsServiceRole
  ECSTaskRole:
    Description: REPLACE_ME_ECS_TASK_ROLE_ARN
    Value: !GetAtt
      - ECSTaskRole
      - Arn
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - ECSTaskRole
  CodeBuildRole:
    Description: REPLACE_ME_CODEBUILD_ROLE_ARN
    Value: !GetAtt
      - MythicalMysfitsServiceCodeBuildServiceRole
      - Arn
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - MythicalMysfitsServiceCodeBuildServiceRole
  CodePipelineRole:
    Description: REPLACE_ME_CODEPIPELINE_ROLE_ARN
    Value: !GetAtt
      - MythicalMysfitsServiceCodePipelineServiceRole
      - Arn
    Export:
      Name: !Join
        - ':'
        - - !Ref 'AWS::StackName'
          - MythicalMysfitsServiceCodePipelineServiceRole